@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home" IconColor="Color.Inherit"> @L["Home"]</MudNavLink>
<MudNavLink Href="/categories" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Category" IconColor="Color.Inherit">@L["Category"]</MudNavLink>
<MudNavLink Href="/merchantcategories" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Sell" IconColor="Color.Inherit">@L["Merchants"]</MudNavLink>
<MudNavGroup Title="eSIM" Expanded="false" Icon="@Icons.Material.Filled.Dataset">
    <MudNavLink Href="/esim-packages" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.SimCard" IconColor="Color.Inherit">@L["ESimPackages"]</MudNavLink>
    <MudNavLink Href="/app-users" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Group" IconColor="Color.Inherit">@L["AppUsers"]</MudNavLink>
</MudNavGroup>
<MudNavGroup Title=@L["Settings"] Expanded="false" Icon="@Icons.Material.Filled.Settings">
    <MudNavLink Href="/facilities" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Tag" IconColor="Color.Inherit">@L["Facility"]</MudNavLink>
    <MudNavLink Href="/favorites" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Favorite" IconColor="Color.Inherit">@L["Favorite"]</MudNavLink>
    <MudNavLink Href="/files" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Attachment" IconColor="Color.Inherit">@L["File"]</MudNavLink>
    <MudNavLink Href="/languages" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Language" IconColor="Color.Inherit">@L["Language"]</MudNavLink>
    <MudNavLink Href="/reviews" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Reviews" IconColor="Color.Inherit">@L["Review"]</MudNavLink>
    @if (Claims.Any(x => x.Type == ClaimTypes.Role && x.Value == "Admin"))
    {
        <MudNavLink Href="/users" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.VerifiedUser" IconColor="Color.Inherit">@L["User"]</MudNavLink>
    }
    <MudNavLink Href="/regions" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.AreaChart" IconColor="Color.Inherit">@L["Region"]</MudNavLink>
    <MudNavLink Href="/more" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.More" IconColor="Color.Inherit">@L["More"]</MudNavLink>
    <MudNavLink Href="/service-types" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.MergeType" IconColor="Color.Inherit">@L["ServiceType"]</MudNavLink>
    <MudNavLink Href="/card-colors" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Colorize" IconColor="Color.Inherit">@L["CardColors"]</MudNavLink>
</MudNavGroup>


@code {
    public IEnumerable<Claim> Claims { get; set; } = Enumerable.Empty<Claim>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        Claims = user.Claims;
        await base.OnInitializedAsync();
    }

}
