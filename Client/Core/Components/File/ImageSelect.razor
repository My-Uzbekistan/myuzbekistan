@using System.Linq.Expressions
@inject IFileService FileService
@inject IUFileService UFileService
@inject Session Session
@namespace Client.Core.Components
@inherits MixedStateComponent<TableResponse<FileView>,TableOptions>

@{
    Images = State.LastNonErrorValue ?? new TableResponse<FileView>() { };
}

<MudDialog IsVisible="@IsImageSelect" IsVisibleChanged="(isVisible) => OnVisibleChanged(isVisible)" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            List of Images
        </MudText>
        <MudSpacer />
        <FileUpload />
    </TitleContent>
    <DialogContent>
        <MudGrid Justify="Justify.SpaceEvenly" Spacing="2" Style="max-height: 520px; overflow-x:hidden; overflow-y:scroll; min-height: 200px">
            @if (Images?.Items.Count() > 0)
            {
                @foreach (var image in Images.Items)
                {
                   
                    <MudItem xs="3" @onclick='()=>UpdateValue(image)' Style="width:230px; height:170px; margin-bottom:10px;" Class="@StyleFor(image.Id)">
                        <MudImage ObjectFit="ObjectFit.Contain" Src="@(url + image.Path)" Alt="@image.Name" Style="max-width:200px; max-height:130px;" />
                    </MudItem>
                }
            }
            else
            {
                <MudItem Class="d-flex align-center">
                    <MudChip T="string" Icon="@Icons.Material.Filled.CloudUpload" IconColor="Color.Warning" Variant="Variant.Text" Color="Color.Warning">No Images Found! Upload Your First Image</MudChip>
                </MudItem>
            }

        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Class="px-10">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public bool IsImageSelect { get; set; }
    [Parameter] public EventCallback<bool> IsImageSelectChanged { get; set; }

    TableResponse<FileView>? Images { get; set; }

    DialogOptions dialogOptions = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    [Parameter]
    public FileView? Value { get; set; }
    [Parameter]
    public EventCallback<FileView> ValueChanged { get; set; }

    [Parameter]
    public EventCallback ImageSelected { get; set; }

    string url = string.Empty;
    
    protected async override Task OnParametersSetAsync()
    {
        var urlTask = UFileService.GetFileUrl();
        url = await urlTask;
    }

    void UpdateValue(FileView value)
    {
        Value = value;
        StateHasChanged();
    }

    async Task Submit()
    {
        await ValueChanged.InvokeAsync(Value);
       
        await ImageSelected.InvokeAsync();
    }


    protected override async Task<TableResponse<FileView>> ComputeState(CancellationToken cancellationToken)
    {
        return await FileService.GetAll(new TableOptions() { Page = 1, PageSize = 1000, SortLabel = "Id", SortDirection = 1, Search = "" }, cancellationToken);
    }

    public string StyleFor(long id)
    {
        if (Value != null && Value.Id == id)
        {
            return "border-dotted border-2 mud-border-success";
        }
        else
        {
            return "";
        }
    }


    private async void OnVisibleChanged(bool isVisible)
    {
        IsImageSelect = isVisible;
        await IsImageSelectChanged.InvokeAsync(IsImageSelect);
        StateHasChanged();
    }
    

}