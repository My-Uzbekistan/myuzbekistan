@inject IUFileService UFileService
@namespace Client.Core.Components

<MudFileUpload T="IReadOnlyList<IBrowserFile>"
               OnFilesChanged="OnChanged"
               AppendMultipleFiles
               Hidden="false"
               InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
               InputStyle="opacity:0"
               @ondrop="@ClearDragClass"
               @ondragenter="@SetDragClass"
               @ondragleave="@ClearDragClass"
               @ondragend="@ClearDragClass">
    <ActivatorContent>
        <MudPaper Height="110px"
                  Outlined="true"
                  Class="@_dragClass"
                  Style="width: 100%; background: rgba(84, 167, 250, 0.05);">
            <MudIcon Color="Color.Primary" Icon="@Icons.Material.Outlined.Upload" />
            <MudText Color="Color.Primary" Typo="Typo.body1">
                @L["ClickOnTheAreaToAddAPhoto"] or drag files here
            </MudText>
        </MudPaper>
    </ActivatorContent>
</MudFileUpload>

<span id="downloadLink">@(_percent != "0" ? $"{_percent}%" : string.Empty)</span>

@code {
    private const string DefaultDragClass = "border border-dashed cursor-pointer rounded mud-border-primary d-flex flex-column justify-center align-center";
    private string _dragClass = DefaultDragClass;

    string _percent = "0";
    private string? _link;
    public string? Link
    {
        get => _link;
        set
        {
            if (_link == value) return;
            _link = value;
        }
    }

    [Parameter]
    public EventCallback<string> LinkChanged { get; set; }

    [Parameter]
    public string Accept { get; set; } = ".jpg, .jpeg, .png";

    readonly CancellationTokenSource _cancelTokenSource = new();

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    async void OnChanged(InputFileChangeEventArgs e)
    {
        try
        {
            _percent = "0";

            var files = e.GetMultipleFiles();
            int completedCount = 0;

            foreach (var file in files)
            {
                var metadata = new Dictionary<string, string>
                {
                    ["fileName"] = file.Name,
                    ["name"] = file.Name,
                    ["contentType"] = file.ContentType,
                };

                UFileService.UploadProgress += (s) =>
                {
                    _percent = s;
                    InvokeAsync(StateHasChanged);
                };

                UFileService.Completed += async (url) =>
                {
                    completedCount++;

                    await InvokeAsync(() =>
                    {
                        StateHasChanged();

                    });
                };

                UFileService.HadError += (s) => { Console.WriteLine(s.Message); };

                await UFileService.Upload(file.OpenReadStream(file.Size), metadata, _cancelTokenSource.Token);
            }
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
        finally
        {
            StateHasChanged();
        }
    }
}