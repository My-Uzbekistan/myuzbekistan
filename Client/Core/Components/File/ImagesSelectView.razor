@namespace Client.Core.Components
@inject IUFileService UFileService
<MudGrid Style="align-items:center" Class="flex-row mt-5">
 @if (Value != null)
  {
    @foreach (var item in Value)
    {
        <MudBadge Icon="@Icons.Material.Filled.Clear" Color="Color.Error" Overlap="true" Bordered="true" Visible="true" OnClick="() => ClearImage(item)">
            <MudItem Style="width:270px; height:150px;" Class="border-dotted border-2 mud-border-primary d-flex justify-center align-center ms-5 mb-6">
                @if (item != null)
                {
                       
                    <MudImage @onclick="() => ShowImage(item)" ObjectFit="ObjectFit.Contain" Fluid="true" Src="@(url + item.Path)" Alt="@item.Name" Style="max-width:250px; max-height:130px;" />
                }
                else
                {
                    <MudChip T="string" Icon="@Icons.Material.Filled.CloudUpload" IconColor="Color.Warning" Variant="Variant.Text" Color="Color.Warning">Click here to select images</MudChip>
                }
            </MudItem>
        </MudBadge>
    }
  }
    <MudItem>
        <MudPaper @onclick="() => IsImageSelect = true" Class="border-dashed border-2 mud-border-primary pa-4 ms-2 mb-6" Style="height: 90px; display:flex; flex-direction:column; align-items:center; justify-content: space-around; cursor:pointer">
            <MudIcon Icon="@Icons.Material.Filled.Add" />
            <MudText>@(Label ?? L["AddImages"])</MudText>
        </MudPaper>
    </MudItem>
  
</MudGrid>


<!-- Обновлённый ImageSelect с Multiple -->
<ImageSelect Multiple="true"
             SelectedValues="@ImageToAdd"
             SelectedValuesChanged="@((List<FileView> v) => ImageToAdd = v)"
             IsImageSelect="@IsImageSelect"
             IsImageSelectChanged="@(v => IsImageSelect = v)"
             ImageSelected="OnImageSelected"
             Accept="@Accept" />

<MudDialog @bind-IsVisible="@isImageShow" Options="dialogOptions" Style="min-width:600px; height:auto">

    <DialogContent>
        <MudImage Fluid="true" Src="@(url + ImageToShow.Path)" Alt="@ImageToShow.Name" />
    </DialogContent>

</MudDialog>

@code {
    [Parameter]
    public string Accept { get; set; } = ".jpg, .jpeg, .png";

    [Parameter]
    public ICollection<FileView>? Value { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public EventCallback<ICollection<FileView>> ValueChanged { get; set; }

    DialogOptions dialogOptions = new() { FullWidth = true };

    public bool IsImageSelect { get; set; } = false;
    bool isImageShow = false;

    FileView ImageToShow = new();
    List<FileView> ImageToAdd = new();
    string url = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (Value == null)
        {
            Value = new HashSet<FileView>();
        }
        else
        {
            Value = Value.ToHashSet(); // для предотвращения дублей
        }

        url = await UFileService.GetFileUrl();
    }

    void ShowImage(FileView image)
    {
        ImageToShow = image;
        isImageShow = true;
    }

    void OnImageSelected()
    {
        foreach (var img in ImageToAdd)
        {
            if (!Value!.Any(v => v.Id == img.Id))
                Value!.Add(img);
        }

        ValueChanged.InvokeAsync(Value);
        IsImageSelect = false;
        ImageToAdd.Clear();
    }

    void ClearImage(FileView file)
    {
        Value?.Remove(file);
        ValueChanged.InvokeAsync(Value);
    }
}

<style>
    .mud-badge {
        cursor: pointer;
    }
</style>