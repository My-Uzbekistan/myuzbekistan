@using System.Linq.Expressions
@inherits ComputedStateComponent<TableResponse<LanguageView>>
@inject ILanguageService LanguageService

@{
    var data = State.ValueOrDefault ?? new TableResponse<LanguageView>();
}

<MudSelect class="@Class" Label="@Label" T="LanguageView" @attributes="Attributes" Required=Required MultiSelection="true" SelectedValues="Value" ToStringFunc="(x)=>x?.Name" SelectedValuesChanged="(vl) => UpdateValue(vl.ToList())">
    @foreach (var item in data.Items)
    {
        <MudSelectItem T="LanguageView" Value="@item">@item.Name</MudSelectItem>
    }
</MudSelect>

@code {
    [Parameter]
    public string? Class { get; set; } = string.Empty;

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public ICollection<LanguageView>? Value { get; set; }

    [Parameter]
    public EventCallback<ICollection<LanguageView>> ValueChanged { get; set; }

    [Parameter]
    public bool Required { get; set; } = false;

    [Parameter]
    public Expression<Func<ICollection<LanguageView>>>? For { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? Attributes { get; set; }

    async Task UpdateValue(ICollection<LanguageView> value)
    {
        Value = value;

        await ValueChanged.InvokeAsync(Value);
        await InvokeAsync(() => StateHasChanged());
    }


    protected override async Task<TableResponse<LanguageView>> ComputeState(CancellationToken cancellationToken)
    {
        return await LanguageService.GetAll(new() { PageSize = 100, Lang = CultureInfo.CurrentCulture.Name.Split("-").FirstOrDefault("en"), }, cancellationToken);
    }


}