@using System.Linq.Expressions
@inherits MixedStateComponent<TableResponse<CategoryView>,string>
@inject ICategoryService CategoryService

@{
    var data = State.ValueOrDefault ?? new TableResponse<CategoryView>();
}
<MudAutocomplete T="CategoryView" 
                 @attributes="Attributes"
                 Value="Value"
                 Immediate="true"
                 Required=Required
                 For="For"
                 Label="@Label"
                 MaxItems="150"
                 Variant="Variant.Outlined"
                 Margin="Margin.Dense"
                 ValueChanged="UpdateValue" ToStringFunc="(x)=>x?.Name" SearchFunc="Search"  />

@code {
    [Parameter]
    public CategoryView? Value { get; set; }

    [Parameter]
    public string? Label { get; set; }
    [Parameter]
    public EventCallback<CategoryView> ValueChanged { get; set; }
    [Parameter]
    public bool Required { get; set; }=false;
    [Parameter]
    public Expression<Func<CategoryView>>? For { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? Attributes { get; set; }

    async Task UpdateValue(CategoryView value)
    {
        Value = value;

        await ValueChanged.InvokeAsync(Value);
        await InvokeAsync(() => StateHasChanged());
    }

    protected override MutableState<string?>.Options GetMutableStateOptions()
        => new() { InitialValue = null };

    protected override async Task<TableResponse<CategoryView>> ComputeState(CancellationToken cancellationToken)
    {
        var res = await CategoryService.GetAll(new() { Search = MutableState.Value, WithoutExpand = true, Lang = CultureInfo.CurrentCulture.Name.Split("-").FirstOrDefault("ru")  }, cancellationToken);

        return res;
    }

    private async Task<IEnumerable<CategoryView>> Search(string value,CancellationToken cancellationToken)
    {
        MutableState.Set(value);
        MutableState.Invalidate();

        await Task.Delay(30);

        return  State?.ValueOrDefault?.Items?.ToList() ?? new List<CategoryView>();
    }


}