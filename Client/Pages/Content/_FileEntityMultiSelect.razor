@using System.Linq.Expressions
@inherits ComputedStateComponent<TableResponse<FileView>>
@inject IFileService FileService

@{
    var data = State.ValueOrDefault ?? new TableResponse<FileView>();
}

<MudSelect T="FileView" @attributes="Attributes" Required=Required MultiSelection="true" SelectedValues="Value" ToStringFunc="(x)=>x?.Name" SelectedValuesChanged="(vl) => UpdateValue(vl.ToList())">
    @foreach (var item in data.Items)
    {
        <MudSelectItem T="FileView" Value="@item">@item.Name</MudSelectItem>
    }
</MudSelect>

@code {
   
   [Parameter]
    public ICollection<FileView>? Value { get; set; }
   
   [Parameter]
    public EventCallback<ICollection<FileView>> ValueChanged { get; set; }
    
    [Parameter]
    public bool Required { get; set; }=false;
    
    [Parameter]
    public Expression<Func<ICollection<FileView>>>? For { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? Attributes { get; set; }

    async Task UpdateValue(ICollection<FileView> value)
    {
        Value = value;

        await ValueChanged.InvokeAsync(Value);
        await InvokeAsync(() => StateHasChanged());
    }


    protected override async Task<TableResponse<FileView>> ComputeState(CancellationToken cancellationToken)
    {
        return await FileService.GetAll(new() { PageSize = 100 }, cancellationToken);
    }


}