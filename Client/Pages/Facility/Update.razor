@page "/facilities/{Id:long}"

@inherits ComputedStateComponent<List<FacilityView>>
@inject IFacilityService FacilityService
@inject UICommander Command
@inject ISnackbar Snackbar
@inject NavigationManager navigation
@inject Session Session

@{
    var Model = State.LastNonErrorValue ?? new List<FacilityView>() { };
}

<Client.Pages.Facility._Form OnSubmit="OnSubmit" Model="Model" Processing="@Processing" IsNew="false"/>



@code {
    [Parameter]
    public long Id { get; set; }

    public bool Processing {get;set;}=false;
    
    public async Task OnSubmit(List<FacilityView> entity)
    {
       Processing =true;
     
     
       var response = await Command.Run(new UpdateFacilityCommand(Session,entity));
       if(response.HasError)
       {
          Snackbar.Add(@L["Error"]+" : "+response.Error?.Message,Severity.Success);
       }
       else
       {
          Snackbar.Add(@L["SuccessUpdate"], Severity.Success);
          navigation.NavigateTo("/facilities");
       }

       Processing=false;
    }

    protected override async Task<List<FacilityView>> ComputeState(CancellationToken cancellationToken)
    {
        return await FacilityService.Get(Id,cancellationToken);
    }
}
