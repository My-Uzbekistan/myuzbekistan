@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Logging
@using MudBlazor.StaticInput
@using MudBlazorWebApp1.Components.Account
@using myuzbekistan.Shared


@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IJSRuntime JS

<PageTitle>My Uzbekistan</PageTitle>
<style>
    input:-webkit-autofill,
    input:-webkit-autofill:hover,
    input:-webkit-autofill:focus,
    input:-webkit-autofill:active {
        border-color: #FFFFFF1A !important;
        -webkit-background-clip: text;
        @* -webkit-text-fill-color: #EBEDF0; *@
        transition: background-color 5000s ease-in-out 0s;
        box-shadow: inset 0 0 20px 20px #FFFFFF1A;
    }
</style>

<div Class="d-flex flex-column align-center justify-center" style="margin-top: 100px;">
    <img style="width:412px" src="/Images/Auth_Img.png" />
    <div>
        <MudPaper Class="d-flex  align-center justify-center  py-8 rounded" Style="width:392px ;background: transparent;border: 1px solid var(--stroke-stroke-soft-200, #E1E4EA); border-radius: 24px !important;box-shadow: 0px 16px 32px -12px #0E121B1A;
;margin-right: 20px;">

            <MudGrid Justify="Justify.Center">
                <MudItem md="10">
                    <StatusMessage Message="@errorMessage" />
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <DataAnnotationsValidator />

                        <MudGrid Justify="Justify.Center" >
                            <MudItem md="12" Style="align-items: center;justify-content: center;display: flex;">
                                <img src="/Images/logo.png" style="width: 228px; height: 32px;" />
                            </MudItem>
                            <MudItem md="12">
                                <label>Email</label>
                                <MudStaticTextField For="@(() => Input.Email)" 
                                    @bind-Value="Input.Email"
                                    Placeholder="name@example.com" 
                                    Variant="Variant.Outlined"
                                    Margin="Margin.Dense"
                                    UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } })" />
                            </MudItem>
                            <MudItem md="12">
                                <label>Password</label>
                                <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                    Placeholder="password" 
                                    Variant="Variant.Outlined"
                                    InputType="@PasswordInput" 
                                    Adornment="Adornment.End"
                                    AdornmentIcon="@PasswordInputIcon" 
                                    AdornmentClickFunction="showPassword"
                                    Margin="Margin.Dense"
                                    IconSize="Size.Small" 
                                    AdornmentAriaLabel="Show Password"
                                    UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } })">

                                </MudStaticTextField>
                            </MudItem>
                            <MudItem md="12">
                                <MudStaticButton Style="background:#0077FF; color:white" Variant="Variant.Filled" Color="Color.Transparent" FullWidth="true"
                                    FormAction="FormAction.Submit">Login</MudStaticButton>
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </div>



</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }


    private DotNetObjectReference<LoginComponent>? _objRef;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"OnAfterRenderAsync called (firstRender={firstRender})");
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("registerBlazorInterop", _objRef);
        }
    }

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    [JSInvokable]
    public void ButtonTestclick()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure:
        false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
            "Account/LoginWith2fa",
            new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

<script>
    @* window.registerBlazorInterop = (dotNetHelper) => {
        debugger
         window._blazorHelper = dotNetHelper;
     };

     window.showPassword = function (inputElement) {
        debugger
         window.DotNet?.invokeMethodAsync('ButtonTestclick');
     }; *@

        let timeoutId;

    function showPassword(inputElement, button) {
        if (inputElement.type === 'password') {
            inputElement.type = 'text';
            clearTimeout(timeoutId);
            timeoutId = setTimeout(function () {
                inputElement.type = 'password';
            }, 5000);
        } else {
            inputElement.type = 'password';
            clearTimeout(timeoutId);
        }
    }
</script>