@page "/Account/Login"
@layout AuthLayout
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Logging
@using MudBlazor.StaticInput
@using MudBlazorWebApp1.Components.Account
@using myuzbekistan.Shared

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
<PageTitle>My Uzbekistan</PageTitle>
<style>
    &:-webkit-autofill,
    &:-webkit-autofill:hover,
    &:-webkit-autofill:focus,
    &:-webkit-autofill:active,
    &:-internal-autofill-selected {
        border-color: #FFFFFF1A !important;
        -webkit-background-clip: text;
        -webkit-text-fill-color: #EBEDF0;
        transition: background-color 5000s ease-in-out 0s;
        box-shadow: inset 0 0 20px 20px #FFFFFF1A;
    }

</style>

<div Class="d-flex flex-row align-center justify-center" style="background: linear-gradient(162deg, #7eb9f1, #668bb929);">
    <div Style="height:100vh;width:100vw;background-size: cover;background-repeat: no-repeat;background-image: url(https://avatars.dzeninfra.ru/get-zen_doc/3693937/pub_638dd80f07aeea18753441f5_638dec5307aeea18754ba6c5/scale_1200);"></div>

    <div style="display: flex;align-items: center;flex-direction: column;height: 100vh;width: 40%;backdrop-filter: blur(43px);justify-content: space-evenly;filter: blur(15px);background-size: cover;background-repeat: no-repeat;background-image: url(https://avatars.dzeninfra.ru/get-zen_doc/3693937/pub_638dd80f07aeea18753441f5_638dec5307aeea18754ba6c5/scale_1200);">
        
    </div>
    <div style="width: 500px;position: absolute;right: 22px;">
        <Logo Style="width: 100%;position: absolute;top: -213px;right: 12px;"></Logo>

        <MudPaper Class="d-flex  align-center justify-center  py-8 rounded" Style="background: transparent;border-radius: 63px !important;box-shadow: 0px 1px 8px black;margin-right: 20px;">



            <MudGrid Justify="Justify.Center">
                <MudItem md="6">
                    <StatusMessage Message="@errorMessage" />
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <DataAnnotationsValidator />

                        <MudGrid Justify="Justify.Center">
                            <MudItem md="12">
                                <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                                    Label="Email" Placeholder="name@example.com"
                                                    UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } } )" />
                            </MudItem>
                            <MudItem md="12">
                                <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                                    Label="Password" InputType="InputType.Password" Placeholder="password"
                                                    UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
                            </MudItem>
                            <MudItem md="12">
                                <MudStaticButton Variant="Variant.Filled" Color="Color.Transparent" FullWidth="true" FormAction="FormAction.Submit">Log in</MudStaticButton>
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </div>


    
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
