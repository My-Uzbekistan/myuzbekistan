@page "/categories"
@page "/more"

@inject UICommander commander
@inject Session Session
@inject NavigationManager navigation
@inject ISnackbar Snackbar
@inject IDialogService _dialogService
@inject UInjector UInjector
@inject ICategoryService CategoryService

@inherits MixedStateComponent<TableResponse<CategoryView>,TableOptions>
@{
    Items = State.GetValue(UInjector);
}

<ListContainer Title="Category">
    <Actions>

        <MudLink Href=@($"/{routePath}/create")>
            <MudButton Style="float:right;" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">
                @L["Create"]
            </MudButton>
        </MudLink>


    </Actions>
    <ChildContent>
        <UTCTable Values=@Items SortColumns="SortColumns" MutableState=MutableState Tclass="CategoryView">
            @if (SortColumns.Contains("Icon"))
            {
                <MudTd DataLabel="Icon">
                    <ImageView fileEntity="@context.IconView" />
                </MudTd>
            }

            <MudTd DataLabel="Name">
                <MudLink Underline="Underline.None" Href="@($"/{routePath}/{context.Id}/contents")">
                    <MudButton Variant="Variant.Text"
                               StartIcon="@Icons.Material.TwoTone.GridView"
                               Color="Color.Primary"
                               Style="text-transform:none;width:max-content">
                        @context.Name
                    </MudButton>
                </MudLink>
            </MudTd>
            <MudTd DataLabel="ContentCount">@context.ContentsView.Count</MudTd>
            <MudTd DataLabel="Order">@context.Order</MudTd>

            <MudTd DataLabel="Id">@context.Id</MudTd>

            <MudTd>

                <div style="display:flex; gap:7px; " class="d-flex justify-end">
                    <MudLink Href=@($"/{routePath}/{context.Id }")>
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                    </MudLink>
                    <MudFab @onclick=@(()=>Delete(@context.Id)) Color=Color.Secondary StartIcon=@Icons.Material.Filled.Delete Size=Size.Small IconSize=Size.Small />
                </div>
            </MudTd>
        </UTCTable>
    </ChildContent>
</ListContainer>

@code {
    private string? routePath;
    private TableResponse<CategoryView>? Items;

    private string[] SortColumns = new string[] { "Icon", "Name", "ContentCount", "Order", "Id", };

    protected override void OnInitialized()
    {
        navigation.LocationChanged += Navigation_LocationChanged;
        routePath = navigation.Uri.Contains("/categories") ? "categories" : "more";
        if (routePath == "more")
        {
            SortColumns = ["Name", "ContentCount", "Order", "Id"];
        }
        else
        {
            SortColumns = ["Icon", "Name", "ContentCount", "Order", "Id"];
        }
        base.OnInitialized();
    }

    private void Navigation_LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        MutableState.Value.IsMore = e.Location.Contains("/more");
        routePath = navigation.Uri.Contains("/categories") ? "categories" : "more";
        if (routePath == "more")
        {
            SortColumns = ["Name", "ContentCount", "Order", "Id"];
        }
        else
        {
            SortColumns = ["Icon", "Name", "ContentCount", "Order", "Id"];
        }
        StateHasChanged();
        MutableState.Invalidate();
    }

    protected override MutableState<TableOptions>.Options GetMutableStateOptions()
    {
        routePath = navigation.Uri.Contains("/categories") ? "categories" : "more";
        var uri = navigation.ToAbsoluteUri(navigation.Uri);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("page", out var _initialCount);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out var searchParam);
        int count = 1;
        int.TryParse(_initialCount, out count);
        return new() { InitialValue = new TableOptions() { Page = count == 0 ? 1 : count, PageSize = 11, SortDirection = 1, Lang = CultureInfo.CurrentCulture.Name.Split("-").FirstOrDefault("en"), Search = searchParam, IsMore = routePath == "more" } };
    }

    protected override async Task<TableResponse<CategoryView>> ComputeState(CancellationToken cancellationToken = default)
    {
        var categories = await CategoryService.GetAll(MutableState.Value);
        return categories;
    }

    private async Task Delete(long Id, CancellationToken cancellationToken = default)
    {
        bool? result = await _dialogService.ShowMessageBox(
        @L["DeleteConfirmation"],
        @L["UnDoneDelete"],
        yesText: "Delete!", cancelText: @L["Cancel"]);
        if (result ?? false)
        {
            await commander.Run(new DeleteCategoryCommand(Session, Id));
            Snackbar.Add(@L["SuccessDelete"], Severity.Success);
        }
    }
}