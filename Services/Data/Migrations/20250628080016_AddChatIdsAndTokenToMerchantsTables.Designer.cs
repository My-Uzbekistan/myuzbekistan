// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using myuzbekistan.Services;
using myuzbekistan.Shared;

#nullable disable

namespace Services.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250628080016_AddChatIdsAndTokenToMerchantsTables")]
    partial class AddChatIdsAndTokenToMerchantsTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActualLab.Fusion.Authentication.Services.DbSessionInfo<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("AuthenticatedIdentity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSignOutForced")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OptionsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt", "IsSignOutForced");

                    b.HasIndex("IPAddress", "IsSignOutForced");

                    b.HasIndex("LastSeenAt", "IsSignOutForced");

                    b.HasIndex("UserId", "IsSignOutForced");

                    b.ToTable("_Sessions");
                });

            modelBuilder.Entity("ActualLab.Fusion.Authentication.Services.DbUser<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClaimsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ActualLab.Fusion.Authentication.Services.DbUserIdentity<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DbUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("UserId");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DbUserId");

                    b.HasIndex("Id");

                    b.ToTable("UserIdentities");
                });

            modelBuilder.Entity("ActualLab.Fusion.EntityFramework.Operations.DbEvent", b =>
                {
                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.Property<DateTime>("DelayUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LoggedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("ValueJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.HasKey("Uuid");

                    b.HasIndex("DelayUntil");

                    b.HasIndex("State", "DelayUntil");

                    b.ToTable("_Events");
                });

            modelBuilder.Entity("ActualLab.Fusion.EntityFramework.Operations.DbOperation", b =>
                {
                    b.Property<long>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Index"));

                    b.Property<string>("CommandJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ItemsJson")
                        .HasColumnType("text");

                    b.Property<DateTime>("LoggedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NestedOperations")
                        .HasColumnType("text");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Index");

                    b.HasIndex("LoggedAt");

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("_Operations");
                });

            modelBuilder.Entity("ActualLab.Fusion.Extensions.Services.DbKeyValue", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.HasIndex("ExpiresAt");

                    b.ToTable("_KeyValues");
                });

            modelBuilder.Entity("ContentEntityFacilityEntity", b =>
                {
                    b.Property<long>("ContentsId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentsLocale")
                        .HasColumnType("text");

                    b.Property<long>("FacilitiesId")
                        .HasColumnType("bigint");

                    b.Property<string>("FacilitiesLocale")
                        .HasColumnType("text");

                    b.HasKey("ContentsId", "ContentsLocale", "FacilitiesId", "FacilitiesLocale");

                    b.HasIndex("FacilitiesId", "FacilitiesLocale");

                    b.ToTable("ContentEntityFacilityEntity");
                });

            modelBuilder.Entity("ContentEntityFileEntity", b =>
                {
                    b.Property<long>("FilesId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContentFilesId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentFilesLocale")
                        .HasColumnType("text");

                    b.HasKey("FilesId", "ContentFilesId", "ContentFilesLocale");

                    b.HasIndex("ContentFilesId", "ContentFilesLocale");

                    b.ToTable("ContentEntityFileEntity");
                });

            modelBuilder.Entity("ContentEntityFileEntity1", b =>
                {
                    b.Property<long>("PhotosId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContentPhotosId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentPhotosLocale")
                        .HasColumnType("text");

                    b.HasKey("PhotosId", "ContentPhotosId", "ContentPhotosLocale");

                    b.HasIndex("ContentPhotosId", "ContentPhotosLocale");

                    b.ToTable("ContentEntityFileEntity1");
                });

            modelBuilder.Entity("ContentEntityLanguageEntity", b =>
                {
                    b.Property<long>("ContentsId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentsLocale")
                        .HasColumnType("text");

                    b.Property<long>("LanguagesId")
                        .HasColumnType("bigint");

                    b.Property<string>("LanguagesLocale")
                        .HasColumnType("text");

                    b.HasKey("ContentsId", "ContentsLocale", "LanguagesId", "LanguagesLocale");

                    b.HasIndex("LanguagesId", "LanguagesLocale");

                    b.ToTable("ContentEntityLanguageEntity");
                });

            modelBuilder.Entity("myuzbekistan.Shared.CardEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AddedOn")
                        .HasColumnType("text");

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<long?>("CardId")
                        .HasColumnType("bigint");

                    b.Property<string>("CardPan")
                        .HasColumnType("text");

                    b.Property<CardStatus>("CardStatus")
                        .HasColumnType("jsonb");

                    b.Property<string>("CardToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExpirationDate")
                        .HasColumnType("text");

                    b.Property<string>("HolderName")
                        .HasColumnType("text");

                    b.Property<bool?>("IsMulticard")
                        .HasColumnType("boolean");

                    b.Property<string>("PayerId")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Pinfl")
                        .HasColumnType("text");

                    b.Property<string>("Ps")
                        .HasColumnType("text");

                    b.Property<bool?>("SmsInform")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("myuzbekistan.Shared.CategoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Dictionary<ContentFields, string>>("FieldNames")
                        .HasColumnType("jsonb");

                    b.Property<int>("Fields")
                        .HasColumnType("integer");

                    b.Property<long?>("IconId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Order")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ViewType")
                        .HasColumnType("integer");

                    b.HasKey("Id", "Locale");

                    b.HasIndex("IconId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("myuzbekistan.Shared.ContentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<string>("ActionUrl")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("AverageCheck")
                        .HasColumnType("integer");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CategoryLocale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contacts")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("GlobalRecommended")
                        .HasColumnType("boolean");

                    b.Property<Point>("Location")
                        .HasColumnType("geometry");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<long?>("PhotoId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceInDollar")
                        .HasColumnType("numeric");

                    b.Property<int>("RatingAverage")
                        .HasColumnType("integer");

                    b.Property<bool>("Recommended")
                        .HasColumnType("boolean");

                    b.Property<long?>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegionLocale")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WorkingHours")
                        .HasColumnType("text");

                    b.HasKey("Id", "Locale");

                    b.HasIndex("PhotoId");

                    b.HasIndex("CategoryId", "CategoryLocale");

                    b.HasIndex("RegionId", "RegionLocale");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("myuzbekistan.Shared.ContentRequestEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<long?>("ContentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentLocale")
                        .HasColumnType("text");

                    b.Property<string>("ContentName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegionName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ContentRequests");
                });

            modelBuilder.Entity("myuzbekistan.Shared.FacilityEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("IconId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id", "Locale");

                    b.HasIndex("IconId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("myuzbekistan.Shared.FavoriteEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentLocale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContentId", "ContentLocale");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("myuzbekistan.Shared.FileEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("myuzbekistan.Shared.InvoiceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("MerchantId")
                        .HasColumnType("bigint");

                    b.Property<string>("MerchantLocale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId", "MerchantLocale");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("myuzbekistan.Shared.LanguageEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id", "Locale");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("myuzbekistan.Shared.MerchantCategoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("BrandName")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("ChatIds")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text[]")
                        .HasDefaultValueSql("'{}'");

                    b.Property<string>("Contract")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<short>("Discount")
                        .HasColumnType("smallint");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsVat")
                        .HasColumnType("boolean");

                    b.Property<long?>("LogoId")
                        .HasColumnType("bigint");

                    b.Property<string>("MfO")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("text");

                    b.Property<byte>("PayDay")
                        .HasColumnType("smallint");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceTypeLocale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Vat")
                        .HasColumnType("smallint");

                    b.HasKey("Id", "Locale");

                    b.HasIndex("LogoId");

                    b.HasIndex("ServiceTypeId", "ServiceTypeLocale");

                    b.ToTable("MerchantCategories");
                });

            modelBuilder.Entity("myuzbekistan.Shared.MerchantEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("ChatIds")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text[]")
                        .HasDefaultValueSql("'{}'");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Point>("Location")
                        .HasColumnType("geometry");

                    b.Property<long?>("LogoId")
                        .HasColumnType("bigint");

                    b.Property<string>("MXIK")
                        .HasColumnType("text");

                    b.Property<long>("MerchantCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("MerchantCategoryLocale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Responsible")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WorkTime")
                        .HasColumnType("text");

                    b.HasKey("Id", "Locale");

                    b.HasIndex("LogoId");

                    b.HasIndex("MerchantCategoryId", "MerchantCategoryLocale");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("myuzbekistan.Shared.PaymentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("CallbackData")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("UserBalance")
                        .HasColumnType("numeric");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("myuzbekistan.Shared.RegionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ParentRegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentRegionLocale")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id", "Locale");

                    b.HasIndex("ParentRegionId", "ParentRegionLocale");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("myuzbekistan.Shared.ReviewEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<long>("ContentEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentEntityLocale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContentEntityId", "ContentEntityLocale");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("myuzbekistan.Shared.ServiceTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id", "Locale");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("ActualLab.Fusion.Authentication.Services.DbUserIdentity<string>", b =>
                {
                    b.HasOne("ActualLab.Fusion.Authentication.Services.DbUser<string>", null)
                        .WithMany("Identities")
                        .HasForeignKey("DbUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContentEntityFacilityEntity", b =>
                {
                    b.HasOne("myuzbekistan.Shared.ContentEntity", null)
                        .WithMany()
                        .HasForeignKey("ContentsId", "ContentsLocale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("myuzbekistan.Shared.FacilityEntity", null)
                        .WithMany()
                        .HasForeignKey("FacilitiesId", "FacilitiesLocale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContentEntityFileEntity", b =>
                {
                    b.HasOne("myuzbekistan.Shared.FileEntity", null)
                        .WithMany()
                        .HasForeignKey("FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("myuzbekistan.Shared.ContentEntity", null)
                        .WithMany()
                        .HasForeignKey("ContentFilesId", "ContentFilesLocale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContentEntityFileEntity1", b =>
                {
                    b.HasOne("myuzbekistan.Shared.FileEntity", null)
                        .WithMany()
                        .HasForeignKey("PhotosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("myuzbekistan.Shared.ContentEntity", null)
                        .WithMany()
                        .HasForeignKey("ContentPhotosId", "ContentPhotosLocale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContentEntityLanguageEntity", b =>
                {
                    b.HasOne("myuzbekistan.Shared.ContentEntity", null)
                        .WithMany()
                        .HasForeignKey("ContentsId", "ContentsLocale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("myuzbekistan.Shared.LanguageEntity", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId", "LanguagesLocale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("myuzbekistan.Shared.CategoryEntity", b =>
                {
                    b.HasOne("myuzbekistan.Shared.FileEntity", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId");

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("myuzbekistan.Shared.ContentEntity", b =>
                {
                    b.HasOne("myuzbekistan.Shared.FileEntity", "Photo")
                        .WithOne("ContentPhoto")
                        .HasForeignKey("myuzbekistan.Shared.ContentEntity", "PhotoId");

                    b.HasOne("myuzbekistan.Shared.CategoryEntity", "Category")
                        .WithMany("Contents")
                        .HasForeignKey("CategoryId", "CategoryLocale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("myuzbekistan.Shared.RegionEntity", "Region")
                        .WithMany("Contents")
                        .HasForeignKey("RegionId", "RegionLocale");

                    b.Navigation("Category");

                    b.Navigation("Photo");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("myuzbekistan.Shared.FacilityEntity", b =>
                {
                    b.HasOne("myuzbekistan.Shared.FileEntity", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId");

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("myuzbekistan.Shared.FavoriteEntity", b =>
                {
                    b.HasOne("myuzbekistan.Shared.ContentEntity", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId", "ContentLocale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("myuzbekistan.Shared.InvoiceEntity", b =>
                {
                    b.HasOne("myuzbekistan.Shared.MerchantEntity", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId", "MerchantLocale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("myuzbekistan.Shared.MerchantCategoryEntity", b =>
                {
                    b.HasOne("myuzbekistan.Shared.FileEntity", "Logo")
                        .WithMany()
                        .HasForeignKey("LogoId");

                    b.HasOne("myuzbekistan.Shared.ServiceTypeEntity", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId", "ServiceTypeLocale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logo");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("myuzbekistan.Shared.MerchantEntity", b =>
                {
                    b.HasOne("myuzbekistan.Shared.FileEntity", "Logo")
                        .WithMany()
                        .HasForeignKey("LogoId");

                    b.HasOne("myuzbekistan.Shared.MerchantCategoryEntity", "MerchantCategory")
                        .WithMany("Merchants")
                        .HasForeignKey("MerchantCategoryId", "MerchantCategoryLocale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logo");

                    b.Navigation("MerchantCategory");
                });

            modelBuilder.Entity("myuzbekistan.Shared.RegionEntity", b =>
                {
                    b.HasOne("myuzbekistan.Shared.RegionEntity", "ParentRegion")
                        .WithMany()
                        .HasForeignKey("ParentRegionId", "ParentRegionLocale");

                    b.Navigation("ParentRegion");
                });

            modelBuilder.Entity("myuzbekistan.Shared.ReviewEntity", b =>
                {
                    b.HasOne("myuzbekistan.Shared.ContentEntity", "ContentEntity")
                        .WithMany("Reviews")
                        .HasForeignKey("ContentEntityId", "ContentEntityLocale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentEntity");
                });

            modelBuilder.Entity("ActualLab.Fusion.Authentication.Services.DbUser<string>", b =>
                {
                    b.Navigation("Identities");
                });

            modelBuilder.Entity("myuzbekistan.Shared.CategoryEntity", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("myuzbekistan.Shared.ContentEntity", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("myuzbekistan.Shared.FileEntity", b =>
                {
                    b.Navigation("ContentPhoto");
                });

            modelBuilder.Entity("myuzbekistan.Shared.MerchantCategoryEntity", b =>
                {
                    b.Navigation("Merchants");
                });

            modelBuilder.Entity("myuzbekistan.Shared.RegionEntity", b =>
                {
                    b.Navigation("Contents");
                });
#pragma warning restore 612, 618
        }
    }
}
